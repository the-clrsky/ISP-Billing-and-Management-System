  CREATE TABLE "EMPLOYEES" 
   (	"EMP_ID" NUMBER(10,0), 
	"EMP_FIRST_NAME" VARCHAR2(100), 
	"EMP_LAST_NAME" VARCHAR2(100), 
	"EMP_PHONE" VARCHAR2(100), 
	"EMP_EMAIL" VARCHAR2(100), 
	"EMP_ADDRESS" VARCHAR2(100), 
	"JOB_TITLE" VARCHAR2(100), 
	"HIRE_DATE" DATE, 
	"SALARY" NUMBER(10,0), 
	"DEPT_ID" NUMBER(10,0), 
	"MANAGER_ID" NUMBER(10,0), 
	"ONLEAVE" VARCHAR2(3), 
	"NOTES" VARCHAR2(4000), 
	"EMP_IMG" BLOB, 
	"MIMETYPE" VARCHAR2(255 CHAR), 
	"FILENAME" VARCHAR2(400 CHAR), 
	"DOB" DATE, 
	"AGE" NUMBER, 
	"RELIGION" VARCHAR2(50), 
	"GENDER" VARCHAR2(10), 
	"MARITAL_STATUS" VARCHAR2(10), 
	"PERMANENT_ADDRESS" VARCHAR2(400), 
	"NID" VARCHAR2(100), 
	"NATIONALITY" VARCHAR2(50), 
	"TERMINATION_DATE" DATE, 
	"REJOIN_DATE" DATE, 
	"FATHERS_NAME" VARCHAR2(100), 
	"MOTHERS_NAME" VARCHAR2(100), 
	"EMERGENCY_CONTACT_NAME" VARCHAR2(100), 
	"EMERGENCY_CONTACT_NUM" VARCHAR2(20), 
	"EMPLOYMENT_STATUS" VARCHAR2(10), 
	 CONSTRAINT "EMPLOYEE_ID_PK" PRIMARY KEY ("EMP_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EQUIPMENTS" 
   (	"EQPT_ID" NUMBER(10,0), 
	"EQPT_TYPE" VARCHAR2(100), 
	"EQPT_MODEL" VARCHAR2(100), 
	"PURCHASE_DATE" DATE, 
	"INSTALLATION_DATE" DATE, 
	"STATUS" VARCHAR2(100), 
	"COMMENTS" VARCHAR2(100), 
	"AREA_ID" NUMBER(10,0), 
	"POP_ID" NUMBER(10,0), 
	"EQU_IMAGE" BLOB, 
	"MIMETYPE" VARCHAR2(255 CHAR), 
	"FILENAME" VARCHAR2(400 CHAR), 
	"IMAGE_LAST_UPDATE" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"TAGS" VARCHAR2(50), 
	"EQUIPMENT_PRICE" NUMBER, 
	"QTY" NUMBER, 
	 CONSTRAINT "EQUIPMENT_ID_PK" PRIMARY KEY ("EQPT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "AREA" 
   (	"AREA_ID" NUMBER(10,0), 
	"AREA_NAME" VARCHAR2(100), 
	"AREA_MANAGER_ID" NUMBER(10,0), 
	"DIVISION" VARCHAR2(100 CHAR), 
	"CITY" VARCHAR2(100 CHAR), 
	"CITY_CORPORATION" VARCHAR2(100 CHAR), 
	"THANA" VARCHAR2(100), 
	 CONSTRAINT "AREA_ID_PK" PRIMARY KEY ("AREA_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "CUSTOMERS" 
   (	"CUST_ID" NUMBER, 
	"CUST_FIRST_NAME" VARCHAR2(100), 
	"CUST_LAST_NAME" VARCHAR2(100), 
	"CUST_ADDRESS" VARCHAR2(100), 
	"CUST_PHONE" VARCHAR2(100), 
	"CUST_EMAIL" VARCHAR2(100), 
	"DEPOSIT_AMOUNT" NUMBER(10,0), 
	"CUST_START_DATE" DATE, 
	"PKG_ID" NUMBER, 
	"AREA_ID" NUMBER, 
	"POP_ID" NUMBER, 
	"EXT_ID" NUMBER, 
	"CUST_TYPE" VARCHAR2(100), 
	"CUST_STATUS" VARCHAR2(10), 
	 CONSTRAINT "CUSTOMER_ID_PK" PRIMARY KEY ("CUST_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DEPARTMENTS" 
   (	"DEPT_ID" NUMBER(10,0), 
	"DEPT_NAME" VARCHAR2(100), 
	"MANAGER_ID" NUMBER(10,0), 
	 CONSTRAINT "DEPARTMENT_ID_PK" PRIMARY KEY ("DEPT_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "MANAGER_ID_UK" UNIQUE ("MANAGER_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EXPENSE_DETAILS" 
   (	"EXPENSE_ID" NUMBER, 
	"EXPENSE_DTLS_ID" NUMBER(10,0), 
	"EMP_ID" NUMBER, 
	"ITEM_NAME" VARCHAR2(100), 
	"QUANTITY" NUMBER, 
	"UNIT_TYPE" VARCHAR2(100), 
	"UNIT_PRICE" NUMBER, 
	"SUBTOTAL" NUMBER, 
	"NOTE" VARCHAR2(1000 CHAR), 
	"EG_ID" NUMBER, 
	 CONSTRAINT "EXPENSE_DTLS_ID_PK" PRIMARY KEY ("EXPENSE_DTLS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EXPENSE_GROUPS" 
   (	"EG_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"GROUP_NAME" VARCHAR2(100 CHAR), 
	"DESCRIPTION" VARCHAR2(1000 CHAR), 
	 CONSTRAINT "EXPENSE_GROUPS_PK" PRIMARY KEY ("EG_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EXPENSE_MASTER" 
   (	"EXPENSE_ID" NUMBER(10,0), 
	"EXPENSE_DATE" DATE, 
	"DAILY_TOTAL" NUMBER(10,2), 
	 CONSTRAINT "EXPENSE_ID_PK" PRIMARY KEY ("EXPENSE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EXTRA_SERVICES" 
   (	"EXT_ID" NUMBER(10,0), 
	"SERVICE_NAME" VARCHAR2(100), 
	"SERVICE_TYPE" VARCHAR2(100), 
	"SERVICE_PRICE" VARCHAR2(100), 
	 CONSTRAINT "EXT_ID_PK" PRIMARY KEY ("EXT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "HTMLDB_PLAN_TABLE" 
   (	"STATEMENT_ID" VARCHAR2(30), 
	"PLAN_ID" NUMBER, 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(4000), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(128), 
	"OBJECT_NAME" VARCHAR2(128), 
	"OBJECT_ALIAS" VARCHAR2(261), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(128), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"DEPTH" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0), 
	"ACCESS_PREDICATES" VARCHAR2(4000), 
	"FILTER_PREDICATES" VARCHAR2(4000), 
	"PROJECTION" VARCHAR2(4000), 
	"TIME" NUMBER(*,0), 
	"QBLOCK_NAME" VARCHAR2(128)
   ) ;

  CREATE TABLE "INVOICE" 
   (	"INVOICE_ID" NUMBER(10,0), 
	"CUST_NAME" VARCHAR2(100), 
	"GROSS_TOTAL" NUMBER(10,0), 
	"INVOICE_DATE" DATE, 
	"BILLING_MONTH" VARCHAR2(100), 
	"BILLING_MONTH2" VARCHAR2(100), 
	"BILLING_YEAR" VARCHAR2(100), 
	"DUE_DATE" DATE, 
	"STATUS" VARCHAR2(100), 
	"CUST_ID" NUMBER(10,0), 
	"PKG_ID" NUMBER(10,0), 
	"OFFER_ID" NUMBER(10,0), 
	"AREA_ID" NUMBER(10,0), 
	"POP_ID" NUMBER(10,0), 
	"EXT_ID" NUMBER(10,0), 
	"USAGE_ID" NUMBER(10,0), 
	"COLLECTION_ID" NUMBER(10,0), 
	"NET_TOTAL" NUMBER, 
	"DISCOUNT" NUMBER, 
	 CONSTRAINT "INVOICE_ID_PK" PRIMARY KEY ("INVOICE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAINTENANCE" 
   (	"MAINT_ID" NUMBER(10,0), 
	"COST" NUMBER(10,0), 
	"CREATE_TIMESTAMP" DATE, 
	"END_TIMESTAMP" DATE, 
	"STATUS" VARCHAR2(100), 
	"TICKET_ID" NUMBER(10,0), 
	"NETWORK_ENG_ID" NUMBER(10,0), 
	"LINE_TECH_ID" NUMBER(10,0), 
	"EQPT_ID" NUMBER(10,0), 
	 CONSTRAINT "MAINTENANCE_ID_PK" PRIMARY KEY ("MAINT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "OFFER_DETAILS" 
   (	"OFFER_DTLS_ID" NUMBER(10,0), 
	"CONDITIONS" VARCHAR2(100), 
	"VALIDITY_START" DATE, 
	"VALIDITY_STOP" DATE, 
	"AMOUNT" NUMBER(10,0), 
	"AREA_ID" NUMBER(10,0), 
	"OFFER_ID" NUMBER(10,0), 
	 CONSTRAINT "OFFER_DETAILS_ID_PK" PRIMARY KEY ("OFFER_DTLS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "OFFER_MASTER" 
   (	"OFFER_ID" NUMBER(10,0), 
	"OFFER_NAME" VARCHAR2(100), 
	"OFFER_APP_MTHS" NUMBER, 
	"STATUS" VARCHAR2(10 CHAR), 
	 CONSTRAINT "OFFER_ID_PK" PRIMARY KEY ("OFFER_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PACKAGE_MASTER" 
   (	"PKG_ID" NUMBER(10,0), 
	"PKG_NAME" VARCHAR2(100), 
	"PKG_PRICE" NUMBER(10,0), 
	"PKG_SPEED" VARCHAR2(100), 
	"PKG_TYPE" VARCHAR2(100), 
	"NET_COST" NUMBER, 
	"SERVICE_CHARGE" NUMBER, 
	"LINE_CHARGE" NUMBER, 
	"PEAK_HOUR_START" VARCHAR2(20), 
	"PEAK_HOUR_END" VARCHAR2(20), 
	"OFF_PEAK_HOUR_START" VARCHAR2(20), 
	"OFF_PEAK_HOUR_END" VARCHAR2(20), 
	"CONNECTION_TYPE" VARCHAR2(20), 
	 CONSTRAINT "PACKAGE_ID_PK" PRIMARY KEY ("PKG_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PAYMENT_COLLECTIONS" 
   (	"COLLECTION_ID" NUMBER(10,0), 
	"COLLECTION_DATE" DATE, 
	"AMOUNT" NUMBER(10,0), 
	"INVOICE_ID" NUMBER(10,0), 
	"PAYMENT_METHOD" VARCHAR2(100), 
	"TRX_ID" VARCHAR2(100), 
	"VAT" VARCHAR2(100), 
	"CUST_NAME" VARCHAR2(100), 
	"INVOICE_DATE" DATE, 
	"BILLING_MONTH" VARCHAR2(100), 
	"BILLING_YEAR" VARCHAR2(100), 
	 CONSTRAINT "PAYMENT_ID_PK" PRIMARY KEY ("COLLECTION_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "POP" 
   (	"POP_ID" NUMBER(10,0), 
	"POP_NAME" VARCHAR2(100), 
	"POP_ADDRESS" VARCHAR2(100), 
	"AREA_ID" NUMBER(10,0), 
	"POP_MANAGER_ID" NUMBER(10,0), 
	"LINE_TECH_ID" NUMBER(10,0), 
	"NETWORK_ENG_ID" NUMBER(10,0), 
	"NOTE" VARCHAR2(500 CHAR), 
	 CONSTRAINT "POP_ID_PK" PRIMARY KEY ("POP_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "SUPPORT" 
   (	"TICKET_ID" NUMBER(10,0), 
	"CREATE_TIMESTAMP" DATE, 
	"END_TIMESTAMP" DATE, 
	"COMPLAINT" VARCHAR2(100), 
	"TICKET_STATUS" VARCHAR2(100), 
	"CUST_ID" NUMBER(10,0), 
	"CSR_ID" NUMBER(10,0), 
	 CONSTRAINT "SUPPORT_TICKET_ID_PK" PRIMARY KEY ("TICKET_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "USAGE" 
   (	"USAGE_ID" NUMBER(10,0), 
	"DURATION_START" DATE, 
	"DURATION_END" DATE, 
	"DATA_UPLOAD" NUMBER(10,0), 
	"DATA_DOWNLOAD" NUMBER(10,0), 
	"CUST_ID" NUMBER(10,0), 
	 CONSTRAINT "USAGE_ID_PK" PRIMARY KEY ("USAGE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "USERS" 
   (	"USER_ID" NUMBER(10,0), 
	"USER_NAME" VARCHAR2(100), 
	"PASSWORD" VARCHAR2(100), 
	"ROLE" VARCHAR2(100), 
	"EMP_ID" NUMBER(10,0), 
	 CONSTRAINT "USER_ID_PK" PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "AREA" ADD CONSTRAINT "AREA_D_AREA_MANAGER_ID" FOREIGN KEY ("AREA_MANAGER_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "AREA_ID" 
before
insert on "AREA"
for each row
begin
    IF :NEW.AREA_ID IS NULL THEN
        SELECT AREA_ID_SEQ.NEXTVAL INTO :NEW.AREA_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "AREA_ID" ENABLE;

  ALTER TABLE "CUSTOMERS" ADD CONSTRAINT "CUST_AREA_ID_FK" FOREIGN KEY ("AREA_ID")
	  REFERENCES "AREA" ("AREA_ID") ENABLE;
  ALTER TABLE "CUSTOMERS" ADD CONSTRAINT "CUST_EXT_ID_FK" FOREIGN KEY ("EXT_ID")
	  REFERENCES "EXTRA_SERVICES" ("EXT_ID") ENABLE;
  ALTER TABLE "CUSTOMERS" ADD CONSTRAINT "CUST_PKG_ID_FK" FOREIGN KEY ("PKG_ID")
	  REFERENCES "PACKAGE_MASTER" ("PKG_ID") ENABLE;
  ALTER TABLE "CUSTOMERS" ADD CONSTRAINT "CUST_POP_ID_FK" FOREIGN KEY ("POP_ID")
	  REFERENCES "POP" ("POP_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CUSTOMER_ID" 
before
insert on "CUSTOMERS"
for each row
begin
    IF :NEW.cust_id IS NULL THEN
        SELECT CUST_ID_SEQ.NEXTVAL INTO :NEW.cust_id FROM dual;
    END IF;
end;
/
ALTER TRIGGER "CUSTOMER_ID" ENABLE;

  ALTER TABLE "DEPARTMENTS" ADD CONSTRAINT "DEPARTMENTS_MANAGER_ID_FK" FOREIGN KEY ("MANAGER_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEPT_ID" 
before
insert on "DEPARTMENTS"
for each row
begin
    IF :NEW.DEPT_ID IS NULL THEN
        SELECT DEPT_ID_SEQ.NEXTVAL INTO :NEW.DEPT_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "DEPT_ID" ENABLE;

  ALTER TABLE "EMPLOYEES" ADD CONSTRAINT "EMPLOYEES_DEPT_ID__FK" FOREIGN KEY ("DEPT_ID")
	  REFERENCES "DEPARTMENTS" ("DEPT_ID") ENABLE;
  ALTER TABLE "EMPLOYEES" ADD CONSTRAINT "EMPLOYEES_MANAGER_ID_FK" FOREIGN KEY ("MANAGER_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EMP_ID" 
before
insert on "EMPLOYEES"
for each row
begin
    IF :NEW.EMP_ID IS NULL THEN
        SELECT EMP_ID_SEQ.NEXTVAL INTO :NEW.EMP_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EMP_ID" ENABLE;

  ALTER TABLE "EQUIPMENTS" ADD CONSTRAINT "EQUIPMENTS_AREA_ID_FK" FOREIGN KEY ("AREA_ID")
	  REFERENCES "AREA" ("AREA_ID") ENABLE;
  ALTER TABLE "EQUIPMENTS" ADD CONSTRAINT "EQUIPMENTS_POP_ID_FK" FOREIGN KEY ("POP_ID")
	  REFERENCES "POP" ("POP_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EQPT_ID" 
before
insert on "EQUIPMENTS"
for each row
begin
    IF :NEW.EQPT_ID IS NULL THEN
        SELECT EQPT_ID_SEQ.NEXTVAL INTO :NEW.EQPT_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EQPT_ID" ENABLE;

  ALTER TABLE "EXPENSE_DETAILS" ADD CONSTRAINT "EG_ID_FK" FOREIGN KEY ("EG_ID")
	  REFERENCES "EXPENSE_GROUPS" ("EG_ID") ENABLE;
  ALTER TABLE "EXPENSE_DETAILS" ADD CONSTRAINT "EMP_ID_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;
  ALTER TABLE "EXPENSE_DETAILS" ADD CONSTRAINT "EXPENSE_ID_FK" FOREIGN KEY ("EXPENSE_ID")
	  REFERENCES "EXPENSE_MASTER" ("EXPENSE_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EXPENSE_DETAILS_ID" 
before
insert on "EXPENSE_DETAILS"
for each row
begin
    IF :NEW.EXPENSE_DTLS_ID IS NULL THEN
        SELECT EXPENSE_DTLS_ID_SEQ.NEXTVAL INTO :NEW.EXPENSE_DTLS_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EXPENSE_DETAILS_ID" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "GENERATE_EXPENSE_DTLS_ID" 
BEFORE INSERT ON expense_details 
FOR EACH ROW 
BEGIN 
    IF :NEW.expense_dtls_id IS NULL THEN 
        SELECT expense_dtls_id_seq.NEXTVAL INTO :NEW.expense_dtls_id FROM dual; 
    END IF; 
END; 

/
ALTER TRIGGER "GENERATE_EXPENSE_DTLS_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EXPENSE_ID" 
before
insert on "EXPENSE_MASTER"
for each row
begin
    IF :NEW.EXPENSE_ID IS NULL THEN
        SELECT EXPENSE_ID_SEQ.NEXTVAL INTO :NEW.EXPENSE_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EXPENSE_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EXT_ID" 
before
insert on "EXTRA_SERVICES"
for each row
begin
    IF :NEW.EXT_ID IS NULL THEN
        SELECT EXTRA_SERVICES_SEQ.NEXTVAL INTO :NEW.EXT_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EXT_ID" ENABLE;

  ALTER TABLE "INVOICE" ADD CONSTRAINT "INVOICE_AREA_ID_FK" FOREIGN KEY ("AREA_ID")
	  REFERENCES "AREA" ("AREA_ID") ENABLE;
  ALTER TABLE "INVOICE" ADD CONSTRAINT "INVOICE_CUST_ID_FK" FOREIGN KEY ("CUST_ID")
	  REFERENCES "CUSTOMERS" ("CUST_ID") ENABLE;
  ALTER TABLE "INVOICE" ADD CONSTRAINT "INVOICE_EXT_ID_FK" FOREIGN KEY ("EXT_ID")
	  REFERENCES "EXTRA_SERVICES" ("EXT_ID") ENABLE;
  ALTER TABLE "INVOICE" ADD CONSTRAINT "INVOICE_OFFER_ID_FK" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFER_MASTER" ("OFFER_ID") ENABLE;
  ALTER TABLE "INVOICE" ADD CONSTRAINT "INVOICE_PKG_ID_FK" FOREIGN KEY ("PKG_ID")
	  REFERENCES "PACKAGE_MASTER" ("PKG_ID") ENABLE;
  ALTER TABLE "INVOICE" ADD CONSTRAINT "INVOICE_POP_ID_FK" FOREIGN KEY ("POP_ID")
	  REFERENCES "POP" ("POP_ID") ENABLE;
  ALTER TABLE "INVOICE" ADD CONSTRAINT "INVOICE_USAGE_ID_FK" FOREIGN KEY ("USAGE_ID")
	  REFERENCES "USAGE" ("USAGE_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "GENERATE_INVOICE_ID" 
BEFORE INSERT ON INVOICE 
FOR EACH ROW 
BEGIN 
    IF :NEW.invoice_id IS NULL THEN 
        SELECT INVOICE_ID_SEQ.NEXTVAL INTO :NEW.invoice_id FROM dual; 
    END IF; 
END; 

/
ALTER TRIGGER "GENERATE_INVOICE_ID" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "INVOICE_ID" 
before
insert on "INVOICE"
for each row
begin
    IF :NEW.INVOICE_ID IS NULL THEN
        SELECT INVOICE_ID_SEQ.NEXTVAL INTO :NEW.INVOICE_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "INVOICE_ID" ENABLE;

  ALTER TABLE "MAINTENANCE" ADD CONSTRAINT "MAINTENANCE_EQPT_ID_FK" FOREIGN KEY ("EQPT_ID")
	  REFERENCES "EQUIPMENTS" ("EQPT_ID") ENABLE;
  ALTER TABLE "MAINTENANCE" ADD CONSTRAINT "MAINTENANCE_LINE_TECH_ID_FK" FOREIGN KEY ("LINE_TECH_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;
  ALTER TABLE "MAINTENANCE" ADD CONSTRAINT "MAINTENANCE_NETWORK_ENG_ID_FK" FOREIGN KEY ("NETWORK_ENG_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;
  ALTER TABLE "MAINTENANCE" ADD CONSTRAINT "MAINTENANCE_TICKET_ID_FK" FOREIGN KEY ("TICKET_ID")
	  REFERENCES "SUPPORT" ("TICKET_ID") ENABLE;

  ALTER TABLE "OFFER_DETAILS" ADD CONSTRAINT "OFFER_D_AREA_ID_FK" FOREIGN KEY ("AREA_ID")
	  REFERENCES "AREA" ("AREA_ID") ENABLE;
  ALTER TABLE "OFFER_DETAILS" ADD CONSTRAINT "OFFER_D_OFFER_ID_FK" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFER_MASTER" ("OFFER_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "GENERATE_OFFER_DTLS_ID" 
BEFORE INSERT ON offer_details 
FOR EACH ROW 
BEGIN 
    IF :NEW.offer_dtls_id IS NULL THEN 
        SELECT ofr_dtls_id_seq.NEXTVAL INTO :NEW.offer_dtls_id FROM dual; 
    END IF; 
END; 

/
ALTER TRIGGER "GENERATE_OFFER_DTLS_ID" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "OFFER_DTLS_ID" 
before
insert on "OFFER_DETAILS"
for each row
begin
    IF :NEW.OFFER_DTLS_ID IS NULL THEN
        SELECT OFR_DTLS_ID_SEQ.NEXTVAL INTO :NEW.OFFER_DTLS_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "OFFER_DTLS_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "OFFER_ID" 
before
insert on "OFFER_MASTER"
for each row
begin
    IF :NEW.OFFER_ID IS NULL THEN
        SELECT OFR_ID_SEQ.NEXTVAL INTO :NEW.OFFER_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "OFFER_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "PKG_ID" 
before
insert on "PACKAGE_MASTER"
for each row
begin
    IF :NEW.PKG_ID IS NULL THEN
        SELECT PKG_ID_SEQ.NEXTVAL INTO :NEW.PKG_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "PKG_ID" ENABLE;

  ALTER TABLE "PAYMENT_COLLECTIONS" ADD CONSTRAINT "PAYMENT_M_INVOICE_ID_FK" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "INVOICE" ("INVOICE_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "COLLECTION_ID" 
before
insert on "PAYMENT_COLLECTIONS"
for each row
begin
    IF :NEW.COLLECTION_ID IS NULL THEN
        SELECT PAYMENT_ID_SEQ.NEXTVAL INTO :NEW.COLLECTION_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "COLLECTION_ID" ENABLE;

  ALTER TABLE "POP" ADD CONSTRAINT "POP_AREA_ID_FK" FOREIGN KEY ("AREA_ID")
	  REFERENCES "AREA" ("AREA_ID") ENABLE;
  ALTER TABLE "POP" ADD CONSTRAINT "POP_LINE_TECH_ID_FK" FOREIGN KEY ("LINE_TECH_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;
  ALTER TABLE "POP" ADD CONSTRAINT "POP_NETWORK_ENG_ID_FK" FOREIGN KEY ("NETWORK_ENG_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;
  ALTER TABLE "POP" ADD CONSTRAINT "POP_POP_MANAGER_ID_FK" FOREIGN KEY ("POP_MANAGER_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "POP_ID" 
before
insert on "POP"
for each row
begin
    IF :NEW.POP_ID IS NULL THEN
        SELECT POP_ID_SEQ.NEXTVAL INTO :NEW.POP_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "POP_ID" ENABLE;

  ALTER TABLE "SUPPORT" ADD CONSTRAINT "SUPPORT_CSR_ID_FK" FOREIGN KEY ("CSR_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;
  ALTER TABLE "SUPPORT" ADD CONSTRAINT "SUPPORT_CUST_ID_FK" FOREIGN KEY ("CUST_ID")
	  REFERENCES "CUSTOMERS" ("CUST_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TICKET_ID" 
before
insert on "SUPPORT"
for each row
begin
    IF :NEW.TICKET_ID IS NULL THEN
        SELECT TICKET_ID_SEQ.NEXTVAL INTO :NEW.TICKET_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "TICKET_ID" ENABLE;

  ALTER TABLE "USAGE" ADD CONSTRAINT "USAGE_CUST_ID_FK" FOREIGN KEY ("CUST_ID")
	  REFERENCES "CUSTOMERS" ("CUST_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "USAGE_ID" 
before
insert on "USAGE"
for each row
begin
    IF :NEW.USAGE_ID IS NULL THEN
        SELECT USAGE_ID_SEQ.NEXTVAL INTO :NEW.USAGE_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "USAGE_ID" ENABLE;

  ALTER TABLE "USERS" ADD CONSTRAINT "USERS_EMP_ID_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES "EMPLOYEES" ("EMP_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "USER_ID" 
before
insert on "USERS"
for each row
begin
    IF :NEW.USER_ID IS NULL THEN
        SELECT USER_ID_SEQ.NEXTVAL INTO :NEW.USER_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "USER_ID" ENABLE;
create or replace FUNCTION invoice_amount(invoice_id_param IN NUMBER)
RETURN NUMBER
IS
    v_net_total NUMBER;
BEGIN
    -- Example query to retrieve amount based on INVOICE_ID
    SELECT NET_TOTAL INTO v_net_total
    FROM invoice
    WHERE invoice_id = invoice_id_param;

    RETURN v_net_total;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;  -- Handle case where no data is found
    WHEN OTHERS THEN
        RAISE;  -- Raise the exception to propagate the error
END invoice_amount;
/


































































































  CREATE UNIQUE INDEX "AREA_ID_PK" ON "AREA" ("AREA_ID") 
  ;

  CREATE UNIQUE INDEX "CUSTOMER_ID_PK" ON "CUSTOMERS" ("CUST_ID") 
  ;

  CREATE UNIQUE INDEX "DEPARTMENT_ID_PK" ON "DEPARTMENTS" ("DEPT_ID") 
  ;

  CREATE UNIQUE INDEX "EMPLOYEE_ID_PK" ON "EMPLOYEES" ("EMP_ID") 
  ;

  CREATE UNIQUE INDEX "EQUIPMENT_ID_PK" ON "EQUIPMENTS" ("EQPT_ID") 
  ;

  CREATE UNIQUE INDEX "EXPENSE_DTLS_ID_PK" ON "EXPENSE_DETAILS" ("EXPENSE_DTLS_ID") 
  ;

  CREATE UNIQUE INDEX "EXPENSE_GROUPS_PK" ON "EXPENSE_GROUPS" ("EG_ID") 
  ;

  CREATE UNIQUE INDEX "EXPENSE_ID_PK" ON "EXPENSE_MASTER" ("EXPENSE_ID") 
  ;

  CREATE UNIQUE INDEX "EXT_ID_PK" ON "EXTRA_SERVICES" ("EXT_ID") 
  ;

  CREATE UNIQUE INDEX "INVOICE_ID_PK" ON "INVOICE" ("INVOICE_ID") 
  ;

  CREATE UNIQUE INDEX "MAINTENANCE_ID_PK" ON "MAINTENANCE" ("MAINT_ID") 
  ;

  CREATE UNIQUE INDEX "MANAGER_ID_UK" ON "DEPARTMENTS" ("MANAGER_ID") 
  ;

  CREATE UNIQUE INDEX "OFFER_DETAILS_ID_PK" ON "OFFER_DETAILS" ("OFFER_DTLS_ID") 
  ;

  CREATE UNIQUE INDEX "OFFER_ID_PK" ON "OFFER_MASTER" ("OFFER_ID") 
  ;

  CREATE UNIQUE INDEX "PACKAGE_ID_PK" ON "PACKAGE_MASTER" ("PKG_ID") 
  ;

  CREATE UNIQUE INDEX "PAYMENT_ID_PK" ON "PAYMENT_COLLECTIONS" ("COLLECTION_ID") 
  ;

  CREATE UNIQUE INDEX "POP_ID_PK" ON "POP" ("POP_ID") 
  ;

  CREATE UNIQUE INDEX "SUPPORT_TICKET_ID_PK" ON "SUPPORT" ("TICKET_ID") 
  ;

  CREATE UNIQUE INDEX "USAGE_ID_PK" ON "USAGE" ("USAGE_ID") 
  ;

  CREATE UNIQUE INDEX "USER_ID_PK" ON "USERS" ("USER_ID") 
  ;





















create or replace PROCEDURE insert_collection(
    P_COLLECTION_DATE IN DATE,
    P_AMOUNT IN NUMBER,
    P_INVOICE_ID IN NUMBER,
    P_PAYMENT_METHOD IN VARCHAR2,
    P_TRX_ID IN VARCHAR2,
    P_VAT IN NUMBER,
    P_CUST_NAME IN VARCHAR2,
    P_INVOICE_DATE IN DATE,
    P_BILLING_MONTH IN VARCHAR2,
    P_BILLING_YEAR IN VARCHAR2)
IS
BEGIN
    INSERT INTO PAYMENT_COLLECTIONS(COLLECTION_DATE, AMOUNT, INVOICE_ID, PAYMENT_METHOD, TRX_ID, VAT, CUST_NAME, INVOICE_DATE, BILLING_MONTH, BILLING_YEAR)
    VALUES(P_COLLECTION_DATE, P_AMOUNT, P_INVOICE_ID, P_PAYMENT_METHOD, P_TRX_ID, P_VAT, P_CUST_NAME, P_INVOICE_DATE, P_BILLING_MONTH, P_BILLING_YEAR);
    COMMIT;
END;
/
create or replace PROCEDURE insert_expense(
    P_P101_EXPENSE_DATE IN DATE,
    P_P101_DAILY_TOTAL IN NUMBER)
IS
    v_expense_id NUMBER;

    CURSOR c_col
    IS
    SELECT  C001 AS ITEM_NAME,
            N001 AS UNIT_PRICE,
            C002 AS UNIT_TYPE,
            N002 AS QUANTITY,
            N003 AS TOTAL,
            N004 AS EMP_ID,
            C003 AS NOTES
        FROM apex_collections
       WHERE collection_name = 'EXPENSE';
BEGIN
    SELECT NVL (MAX (EXPENSE_ID), 0) + 1
     INTO v_expense_id
     FROM EXPENSE_MASTER;

    INSERT INTO EXPENSE_MASTER (EXPENSE_ID, EXPENSE_DATE, DAILY_TOTAL)
        VALUES (v_expense_id, P_P101_EXPENSE_DATE, P_P101_DAILY_TOTAL);

    IF v_expense_id IS NOT NULL
    THEN
        FOR i IN c_col
        LOOP
            INSERT INTO EXPENSE_DETAILS (EXPENSE_ID, ITEM_NAME, UNIT_PRICE, UNIT_TYPE, QUANTITY, SUBTOTAL, EMP_ID, NOTE)
                VALUES (v_expense_id, i.ITEM_NAME, i.UNIT_PRICE, i.UNIT_TYPE, i.QUANTITY, i.TOTAL, i.EMP_ID, i.NOTES);
        END LOOP;
        COMMIT;
        apex_application.g_print_success_message := 'Record Inserted';
        END IF;
END;
/
create or replace PROCEDURE insert_expenses(
    P_EXPENSE_ID IN NUMBER,
    P_EXPENSE_DATE IN DATE,
    P_DAILY_TOTAL IN NUMBER)
IS
    v_expense_id NUMBER;

    CURSOR c_col
    IS
    SELECT  N001 AS EG_ID,
            C001 AS ITEM_NAME,
            N002 AS QUANTITY,
            C002 AS UNIT_TYPE,
            N003 AS UNIT_PRICE,
            N004 AS SUBTOTAL,
            N005 AS EMP_ID,
            C003 AS NOTE,
            C004 AS EXPENSE_ID
        FROM apex_collections
       WHERE collection_name = 'EXPENSES';
BEGIN
    IF P_EXPENSE_ID IS NULL THEN
        SELECT NVL (MAX (EXPENSE_ID), 0) + 1
        INTO v_expense_id
        FROM EXPENSE_MASTER;

        INSERT INTO EXPENSE_MASTER (EXPENSE_ID, EXPENSE_DATE, DAILY_TOTAL)
            VALUES (v_expense_id, P_EXPENSE_DATE, P_DAILY_TOTAL);
    ELSE
        v_expense_id := P_EXPENSE_ID;
        
        UPDATE EXPENSE_MASTER
        SET DAILY_TOTAL = P_DAILY_TOTAL,
            EXPENSE_DATE = P_EXPENSE_DATE
        WHERE EXPENSE_ID = v_expense_id;
    END IF;

    IF v_expense_id IS NOT NULL THEN
        FOR i IN c_col
        LOOP
            INSERT INTO EXPENSE_DETAILS (EXPENSE_ID, ITEM_NAME, UNIT_PRICE, UNIT_TYPE, QUANTITY, SUBTOTAL, EMP_ID, NOTE, EG_ID)
                VALUES (v_expense_id, i.ITEM_NAME, i.UNIT_PRICE, i.UNIT_TYPE, i.QUANTITY, i.SUBTOTAL, i.EMP_ID, i.NOTE, i.EG_ID);
        END LOOP;
        COMMIT;
        apex_application.g_print_success_message := 'Record Inserted';
    END IF;
END;
/
create or replace PROCEDURE insert_into_invoice(
    P_CUST_NAME IN VARCHAR2,
    P_INVOICE_DATE IN DATE,
    P_BILLING_MONTH IN VARCHAR2,
    P_BILLING_MONTH2 IN VARCHAR2,
    P_BILLING_YEAR IN VARCHAR2,
    P_DUE_DATE IN DATE,
    P_STATUS IN VARCHAR2,
    P_CUST_ID IN NUMBER,
    P_PKG_ID IN NUMBER,
    P_OFFER_ID IN NUMBER,
    P_AREA_ID IN NUMBER,
    P_POP_ID IN NUMBER,
    P_EXT_ID IN NUMBER,
    P_USAGE_ID IN NUMBER,
    P_COLLECTION_ID IN NUMBER,
    P_GROSS_TOTAL IN NUMBER,
    P_DISCOUNT IN NUMBER,
    P_NET_TOTAL IN NUMBER)
IS
BEGIN
    INSERT INTO INVOICE (CUST_NAME, INVOICE_DATE, BILLING_MONTH, BILLING_MONTH2, BILLING_YEAR, DUE_DATE, STATUS, CUST_ID, PKG_ID, OFFER_ID, AREA_ID, POP_ID, EXT_ID, USAGE_ID, COLLECTION_ID, GROSS_TOTAL, DISCOUNT, NET_TOTAL)
    VALUES (P_CUST_NAME, P_INVOICE_DATE, P_BILLING_MONTH, P_BILLING_MONTH2, P_BILLING_YEAR, P_DUE_DATE, P_STATUS, P_CUST_ID, P_PKG_ID, P_OFFER_ID, P_AREA_ID, P_POP_ID, P_EXT_ID, P_USAGE_ID, P_COLLECTION_ID, P_GROSS_TOTAL, P_DISCOUNT, P_NET_TOTAL);
    COMMIT;
END;
/
create or replace PROCEDURE insert_offer_master_details (
   P_OFFER_ID      IN NUMBER,
   P_OFFER_NAME    IN VARCHAR2, 
   P_OFFER_APP_MTHS IN NUMBER,
   P_STATUS        IN VARCHAR2)
IS
   v_offer_id   NUMBER;

   CURSOR c_col IS
      SELECT N001 AS Area_ID,
             C001 AS CONDITIONS,
             N002 AS AMOUNT,
             C002 AS START_Date,
             C003 AS END_Date
        FROM apex_collections
       WHERE collection_name = 'OFFER';

BEGIN
   IF P_OFFER_ID IS NULL THEN
      -- Generate new OFFER_ID if not provided
      SELECT NVL (MAX (OFFER_ID), 0) + 1
        INTO v_offer_id
        FROM OFFER_MASTER;

      -- Insert into OFFER_MASTER table
      INSERT INTO OFFER_MASTER (OFFER_ID, OFFER_NAME, OFFER_APP_MTHS, STATUS)
           VALUES (v_offer_id, P_OFFER_NAME, P_OFFER_APP_MTHS, P_STATUS);

   ELSE
      -- Use provided OFFER_ID
      v_offer_id := P_OFFER_ID;

      -- Update STATUS in OFFER_MASTER
      UPDATE OFFER_MASTER
         SET STATUS = P_STATUS
       WHERE OFFER_ID = v_offer_id;
   END IF;

   -- Insert into OFFER_DETAILS for each row in the collection
   FOR i IN c_col
   LOOP
      INSERT INTO OFFER_DETAILS (OFFER_ID, AREA_ID, CONDITIONS, AMOUNT, VALIDITY_START, VALIDITY_STOP)
           VALUES (v_offer_id, i.Area_ID, i.CONDITIONS, i.AMOUNT, i.START_Date, i.END_Date);
   END LOOP;

   -- Commit the transaction
   COMMIT;

   -- Success message
   apex_application.g_print_success_message := 'Record Inserted';

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      raise_application_error(-20001, 'Error occurred: ' || SQLERRM);
END;
/
create or replace PROCEDURE invoice_status(
    P_INVOICE_ID IN NUMBER
)
IS
BEGIN
    UPDATE INVOICE
    SET STATUS = 'Paid'
    WHERE INVOICE_ID = P_INVOICE_ID;

    COMMIT;
END invoice_status;
/
create or replace PROCEDURE set_invoice_tab_collection_id(
    P_INVOICE_ID IN NUMBER
)
IS
BEGIN
    UPDATE INVOICE
    SET COLLECTION_ID = (
        SELECT COLLECTION_ID 
        FROM PAYMENT_COLLECTIONS 
        WHERE INVOICE_ID = P_INVOICE_ID
    )
    WHERE INVOICE_ID = P_INVOICE_ID;
    COMMIT;
END;
/







































































   CREATE SEQUENCE  "AREA_DTLS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999 INCREMENT BY 100 START WITH 5000 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "AREA_ID_SEQ"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 414 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "CUST_ID_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 4223 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "DEPT_ID_SEQ"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 10 START WITH 140 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "EMP_ID_SEQ"  MINVALUE 1 MAXVALUE 9999 INCREMENT BY 1 START WITH 127 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "EQPT_ID_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 10 START WITH 90210 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "EXPENSE_DTLS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 10 START WITH 1500 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "EXPENSE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 10 START WITH 1010 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "EXTRA_SERVICES_SEQ"  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 10 START WITH 1040 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "INVOICE_ID_SEQ"  MINVALUE 1 MAXVALUE 999999 INCREMENT BY 1 START WITH 60299 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "MAINT_ID_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 10 START WITH 80020 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "OFR_DTLS_ID_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 10 START WITH 30580 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "OFR_ID_SEQ"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 302 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "PAYMENT_DTLS_ID_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 50000 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "PAYMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999 INCREMENT BY 1 START WITH 500125 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "PKG_DTLS_ID_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 10 START WITH 20100 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "PKG_ID_SEQ"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 211 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "POP_ID_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 10 START WITH 40180 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "TICKET_ID_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 10 START WITH 70910 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "USAGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1035 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "USER_ID_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 10 START WITH 10100 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;






































































create or replace trigger "AREA_ID"
before
insert on "AREA"
for each row
begin
    IF :NEW.AREA_ID IS NULL THEN
        SELECT AREA_ID_SEQ.NEXTVAL INTO :NEW.AREA_ID FROM dual;
    END IF;
end;
/
create or replace trigger "COLLECTION_ID"
before
insert on "PAYMENT_COLLECTIONS"
for each row
begin
    IF :NEW.COLLECTION_ID IS NULL THEN
        SELECT PAYMENT_ID_SEQ.NEXTVAL INTO :NEW.COLLECTION_ID FROM dual;
    END IF;
end;
/
create or replace trigger "CUSTOMER_ID"
before
insert on "CUSTOMERS"
for each row
begin
    IF :NEW.cust_id IS NULL THEN
        SELECT CUST_ID_SEQ.NEXTVAL INTO :NEW.cust_id FROM dual;
    END IF;
end;
/
create or replace trigger "DEPT_ID"
before
insert on "DEPARTMENTS"
for each row
begin
    IF :NEW.DEPT_ID IS NULL THEN
        SELECT DEPT_ID_SEQ.NEXTVAL INTO :NEW.DEPT_ID FROM dual;
    END IF;
end;
/
create or replace trigger "EMP_ID"
before
insert on "EMPLOYEES"
for each row
begin
    IF :NEW.EMP_ID IS NULL THEN
        SELECT EMP_ID_SEQ.NEXTVAL INTO :NEW.EMP_ID FROM dual;
    END IF;
end;
/
create or replace trigger "EQPT_ID"
before
insert on "EQUIPMENTS"
for each row
begin
    IF :NEW.EQPT_ID IS NULL THEN
        SELECT EQPT_ID_SEQ.NEXTVAL INTO :NEW.EQPT_ID FROM dual;
    END IF;
end;
/
create or replace TRIGGER "EXPENSE_DETAILS_ID"
before
insert on "EXPENSE_DETAILS"
for each row
begin
    IF :NEW.EXPENSE_DTLS_ID IS NULL THEN
        SELECT EXPENSE_DTLS_ID_SEQ.NEXTVAL INTO :NEW.EXPENSE_DTLS_ID FROM dual;
    END IF;
end;
/
create or replace TRIGGER "EXPENSE_ID"
before
insert on "EXPENSE_MASTER"
for each row
begin
    IF :NEW.EXPENSE_ID IS NULL THEN
        SELECT EXPENSE_ID_SEQ.NEXTVAL INTO :NEW.EXPENSE_ID FROM dual;
    END IF;
end;�
/
create or replace trigger "EXT_ID"
before
insert on "EXTRA_SERVICES"
for each row
begin
    IF :NEW.EXT_ID IS NULL THEN
        SELECT EXTRA_SERVICES_SEQ.NEXTVAL INTO :NEW.EXT_ID FROM dual;
    END IF;
end;
/
create or replace TRIGGER generate_expense_dtls_id 
BEFORE INSERT ON expense_details 
FOR EACH ROW 
BEGIN 
    IF :NEW.expense_dtls_id IS NULL THEN 
        SELECT expense_dtls_id_seq.NEXTVAL INTO :NEW.expense_dtls_id FROM dual; 
    END IF; 
END; 
/
create or replace TRIGGER generate_invoice_id 
BEFORE INSERT ON INVOICE 
FOR EACH ROW 
BEGIN 
    IF :NEW.invoice_id IS NULL THEN 
        SELECT INVOICE_ID_SEQ.NEXTVAL INTO :NEW.invoice_id FROM dual; 
    END IF; 
END; 
/
create or replace TRIGGER generate_offer_dtls_id 
BEFORE INSERT ON offer_details 
FOR EACH ROW 
BEGIN 
    IF :NEW.offer_dtls_id IS NULL THEN 
        SELECT ofr_dtls_id_seq.NEXTVAL INTO :NEW.offer_dtls_id FROM dual; 
    END IF; 
END; 
/
create or replace trigger "INVOICE_ID"
before
insert on "INVOICE"
for each row
begin
    IF :NEW.INVOICE_ID IS NULL THEN
        SELECT INVOICE_ID_SEQ.NEXTVAL INTO :NEW.INVOICE_ID FROM dual;
    END IF;
end;
/
create or replace trigger "OFFER_DTLS_ID"
before
insert on "OFFER_DETAILS"
for each row
begin
    IF :NEW.OFFER_DTLS_ID IS NULL THEN
        SELECT OFR_DTLS_ID_SEQ.NEXTVAL INTO :NEW.OFFER_DTLS_ID FROM dual;
    END IF;
end;
/
create or replace trigger "OFFER_ID"
before
insert on "OFFER_MASTER"
for each row
begin
    IF :NEW.OFFER_ID IS NULL THEN
        SELECT OFR_ID_SEQ.NEXTVAL INTO :NEW.OFFER_ID FROM dual;
    END IF;
end;
/
create or replace TRIGGER "PKG_ID"
before
insert on "PACKAGE_MASTER"
for each row
begin
    IF :NEW.PKG_ID IS NULL THEN
        SELECT PKG_ID_SEQ.NEXTVAL INTO :NEW.PKG_ID FROM dual;
    END IF;
end;
/
create or replace trigger "POP_ID"
before
insert on "POP"
for each row
begin
    IF :NEW.POP_ID IS NULL THEN
        SELECT POP_ID_SEQ.NEXTVAL INTO :NEW.POP_ID FROM dual;
    END IF;
end;
/
create or replace trigger "TICKET_ID"
before
insert on "SUPPORT"
for each row
begin
    IF :NEW.TICKET_ID IS NULL THEN
        SELECT TICKET_ID_SEQ.NEXTVAL INTO :NEW.TICKET_ID FROM dual;
    END IF;
end;
/
create or replace trigger "USAGE_ID"
before
insert on "USAGE"
for each row
begin
    IF :NEW.USAGE_ID IS NULL THEN
        SELECT USAGE_ID_SEQ.NEXTVAL INTO :NEW.USAGE_ID FROM dual;
    END IF;
end;
/
create or replace trigger "USER_ID"
before
insert on "USERS"
for each row
begin
    IF :NEW.USER_ID IS NULL THEN
        SELECT USER_ID_SEQ.NEXTVAL INTO :NEW.USER_ID FROM dual;
    END IF;
end;
/









  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ACTIVE_MAINTENANCES" ("MAINT_ID", "TICKET_ID", "EQPT_ID", "NETWORK_ENG_ID", "LINE_TECH_ID", "CREATE_TIMESTAMP", "END_TIMESTAMP", "COST", "STATUS") AS 
  SELECT MAINT_ID, 
           TICKET_ID, 
           EQPT_ID, 
           NETWORK_ENG_ID, 
           LINE_TECH_ID, 
           CREATE_TIMESTAMP, 
           END_TIMESTAMP, 
           COST, 
           STATUS 
      FROM maintenance 
     WHERE STATUS = 'In Progress'
;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CUSTOMER_INVOICE_SUMMARY2" ("CUST_ID", "AREA_ID", "POP_ID", "INVOICE_ID", "COLLECTION_ID", "CUST_NAME", "AMOUNT", "TICKET_ID", "NET_COST", "AREA_NAME", "POP_NAME") AS 
  SELECT
    C.CUST_ID,
    I.AREA_ID,
    I.POP_ID,
    I.INVOICE_ID,
    P.COLLECTION_ID,
    P.CUST_NAME,
    P.AMOUNT,
    S.TICKET_ID,
    PA.NET_COST,
    A.AREA_NAME,
    PO.POP_NAME
FROM
    CUSTOMERS C
JOIN INVOICE I ON C.CUST_ID = I.CUST_ID
JOIN PAYMENT_COLLECTIONS P ON P.INVOICE_ID = I.INVOICE_ID
JOIN SUPPORT S ON I.CUST_ID = S.CUST_ID
JOIN PACKAGE_MASTER PA ON I.PKG_ID = PA.PKG_ID
JOIN AREA A ON I.AREA_ID = A.AREA_ID
JOIN POP PO ON I.POP_ID = PO.POP_ID;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CUST_COLLECT" ("INVOICE_ID", "AREA_ID", "POP_ID", "DISCOUNT", "COLLECTION_ID", "AMOUNT", "CUST_NAME", "BILLING_MONTH") AS 
  SELECT
    INVOICE.INVOICE_ID, 
    INVOICE.AREA_ID, 
    INVOICE.POP_ID, 
    INVOICE.DISCOUNT, 
    PAYMENT_COLLECTIONS.COLLECTION_ID, 
    PAYMENT_COLLECTIONS.AMOUNT, 
    PAYMENT_COLLECTIONS.CUST_NAME, 
    PAYMENT_COLLECTIONS.BILLING_MONTH
FROM
    PAYMENT_COLLECTIONS
JOIN
    INVOICE
ON
    PAYMENT_COLLECTIONS.INVOICE_ID = INVOICE.INVOICE_ID;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "DAY_OLD_TICKETS" ("TICKET_ID", "CSR_ID", "EMP_FIRST_NAME", "COMPLAINT") AS 
  SELECT s.TICKET_ID, s.CSR_ID, e.EMP_FIRST_NAME, s.COMPLAINT 
FROM support s JOIN employees e 
ON s.CSR_ID = e.EMP_ID 
WHERE TICKET_STATUS = 'Open' 
AND CREATE_TIMESTAMP < SYSDATE - INTERVAL '1' DAY
;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "INACTIVE_CUSTOMERS" ("CUST_ID", "NAME", "CUST_PHONE", "PKG_ID", "AREA_ID", "POP_ID", "EXT_ID", "CUST_TYPE") AS 
  SELECT CUST_ID, 
           CUST_FIRST_NAME || ' ' || CUST_LAST_NAME     NAME, 
           CUST_PHONE, 
           PKG_ID, 
           AREA_ID, 
           POP_ID, 
           EXT_ID, 
           CUST_TYPE 
      FROM customers 
     WHERE CUST_STATUS = 'Inactive'
;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "OPEN_TICKETS" ("TICKET_ID", "CUST_ID", "CSR_ID", "CREATE_TIMESTAMP", "END_TIMESTAMP", "COMPLAINT", "TICKET_STATUS") AS 
  SELECT TICKET_ID, 
           CUST_ID, 
           CSR_ID, 
           CREATE_TIMESTAMP, 
           END_TIMESTAMP, 
           COMPLAINT, 
           TICKET_STATUS 
      FROM support 
     WHERE TICKET_STATUS = 'Open'
;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "TOTAL_CUSTOMERS_01" ("AREA_ID", "AREA_NAME", "AREA_MANAGER_ID", "DIVISION", "CITY", "CITY_CORPORATION", "THANA", "TOTAL_CUSTOMERS") AS 
  SELECT A.AREA_ID, A.AREA_NAME, A.AREA_MANAGER_ID, A.DIVISION, A.CITY, A.CITY_CORPORATION, A.THANA, COUNT(C.CUST_ID) AS TOTAL_CUSTOMERS
FROM AREA A
JOIN CUSTOMERS C ON A.AREA_ID = C.AREA_ID
GROUP BY A.AREA_ID, A.AREA_NAME, A.AREA_MANAGER_ID, A.DIVISION, A.CITY, A.CITY_CORPORATION, A.THANA;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "UNPAID_INVOICES" ("INVOICE_ID", "CUST_ID", "CUST_FIRST_NAME", "CUST_LAST_NAME", "PKG_ID", "INVOICE_DATE", "BILLING_MONTH", "BILLING_YEAR", "DUE_DATE", "TOTAL", "STATUS") AS 
  SELECT INVOICE_ID, 
           CUST_ID, 
           CUST_FIRST_NAME, 
           CUST_LAST_NAME, 
           PKG_ID, 
           INVOICE_DATE, 
           BILLING_MONTH, 
           BILLING_YEAR, 
           DUE_DATE, 
           TOTAL, 
           STATUS 
      FROM invoice 
     WHERE STATUS = 'Unpaid'
;

  CREATE OR REPLACE EDITIONABLE TRIGGER "AREA_ID" 
before
insert on "AREA"
for each row
begin
    IF :NEW.AREA_ID IS NULL THEN
        SELECT AREA_ID_SEQ.NEXTVAL INTO :NEW.AREA_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "AREA_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CUSTOMER_ID" 
before
insert on "CUSTOMERS"
for each row
begin
    IF :NEW.cust_id IS NULL THEN
        SELECT CUST_ID_SEQ.NEXTVAL INTO :NEW.cust_id FROM dual;
    END IF;
end;
/
ALTER TRIGGER "CUSTOMER_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEPT_ID" 
before
insert on "DEPARTMENTS"
for each row
begin
    IF :NEW.DEPT_ID IS NULL THEN
        SELECT DEPT_ID_SEQ.NEXTVAL INTO :NEW.DEPT_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "DEPT_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EMP_ID" 
before
insert on "EMPLOYEES"
for each row
begin
    IF :NEW.EMP_ID IS NULL THEN
        SELECT EMP_ID_SEQ.NEXTVAL INTO :NEW.EMP_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EMP_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EQPT_ID" 
before
insert on "EQUIPMENTS"
for each row
begin
    IF :NEW.EQPT_ID IS NULL THEN
        SELECT EQPT_ID_SEQ.NEXTVAL INTO :NEW.EQPT_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EQPT_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EXPENSE_DETAILS_ID" 
before
insert on "EXPENSE_DETAILS"
for each row
begin
    IF :NEW.EXPENSE_DTLS_ID IS NULL THEN
        SELECT EXPENSE_DTLS_ID_SEQ.NEXTVAL INTO :NEW.EXPENSE_DTLS_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EXPENSE_DETAILS_ID" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "GENERATE_EXPENSE_DTLS_ID" 
BEFORE INSERT ON expense_details 
FOR EACH ROW 
BEGIN 
    IF :NEW.expense_dtls_id IS NULL THEN 
        SELECT expense_dtls_id_seq.NEXTVAL INTO :NEW.expense_dtls_id FROM dual; 
    END IF; 
END; 

/
ALTER TRIGGER "GENERATE_EXPENSE_DTLS_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EXPENSE_ID" 
before
insert on "EXPENSE_MASTER"
for each row
begin
    IF :NEW.EXPENSE_ID IS NULL THEN
        SELECT EXPENSE_ID_SEQ.NEXTVAL INTO :NEW.EXPENSE_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EXPENSE_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EXT_ID" 
before
insert on "EXTRA_SERVICES"
for each row
begin
    IF :NEW.EXT_ID IS NULL THEN
        SELECT EXTRA_SERVICES_SEQ.NEXTVAL INTO :NEW.EXT_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "EXT_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "GENERATE_INVOICE_ID" 
BEFORE INSERT ON INVOICE 
FOR EACH ROW 
BEGIN 
    IF :NEW.invoice_id IS NULL THEN 
        SELECT INVOICE_ID_SEQ.NEXTVAL INTO :NEW.invoice_id FROM dual; 
    END IF; 
END; 

/
ALTER TRIGGER "GENERATE_INVOICE_ID" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "INVOICE_ID" 
before
insert on "INVOICE"
for each row
begin
    IF :NEW.INVOICE_ID IS NULL THEN
        SELECT INVOICE_ID_SEQ.NEXTVAL INTO :NEW.INVOICE_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "INVOICE_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "GENERATE_OFFER_DTLS_ID" 
BEFORE INSERT ON offer_details 
FOR EACH ROW 
BEGIN 
    IF :NEW.offer_dtls_id IS NULL THEN 
        SELECT ofr_dtls_id_seq.NEXTVAL INTO :NEW.offer_dtls_id FROM dual; 
    END IF; 
END; 

/
ALTER TRIGGER "GENERATE_OFFER_DTLS_ID" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "OFFER_DTLS_ID" 
before
insert on "OFFER_DETAILS"
for each row
begin
    IF :NEW.OFFER_DTLS_ID IS NULL THEN
        SELECT OFR_DTLS_ID_SEQ.NEXTVAL INTO :NEW.OFFER_DTLS_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "OFFER_DTLS_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "OFFER_ID" 
before
insert on "OFFER_MASTER"
for each row
begin
    IF :NEW.OFFER_ID IS NULL THEN
        SELECT OFR_ID_SEQ.NEXTVAL INTO :NEW.OFFER_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "OFFER_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "PKG_ID" 
before
insert on "PACKAGE_MASTER"
for each row
begin
    IF :NEW.PKG_ID IS NULL THEN
        SELECT PKG_ID_SEQ.NEXTVAL INTO :NEW.PKG_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "PKG_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "COLLECTION_ID" 
before
insert on "PAYMENT_COLLECTIONS"
for each row
begin
    IF :NEW.COLLECTION_ID IS NULL THEN
        SELECT PAYMENT_ID_SEQ.NEXTVAL INTO :NEW.COLLECTION_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "COLLECTION_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "POP_ID" 
before
insert on "POP"
for each row
begin
    IF :NEW.POP_ID IS NULL THEN
        SELECT POP_ID_SEQ.NEXTVAL INTO :NEW.POP_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "POP_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TICKET_ID" 
before
insert on "SUPPORT"
for each row
begin
    IF :NEW.TICKET_ID IS NULL THEN
        SELECT TICKET_ID_SEQ.NEXTVAL INTO :NEW.TICKET_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "TICKET_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "USAGE_ID" 
before
insert on "USAGE"
for each row
begin
    IF :NEW.USAGE_ID IS NULL THEN
        SELECT USAGE_ID_SEQ.NEXTVAL INTO :NEW.USAGE_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "USAGE_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "USER_ID" 
before
insert on "USERS"
for each row
begin
    IF :NEW.USER_ID IS NULL THEN
        SELECT USER_ID_SEQ.NEXTVAL INTO :NEW.USER_ID FROM dual;
    END IF;
end;
/
ALTER TRIGGER "USER_ID" ENABLE; 